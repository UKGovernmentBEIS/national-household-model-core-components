package uk.org.cse.nhm.language.definition.fuel.extracharges;

import java.util.ArrayList;
import java.util.List;

import com.larkery.jasb.bind.Bind;
import com.larkery.jasb.bind.BindNamedArgument;
import com.larkery.jasb.bind.Identity;

import uk.org.cse.nhm.language.adapt.impl.Prop;
import uk.org.cse.nhm.language.definition.Doc;
import uk.org.cse.nhm.language.definition.enums.XFuelType;
import uk.org.cse.nhm.language.definition.fuel.XTariffCharge;
import uk.org.cse.nhm.language.definition.fuel.validation.DependenciesCannotMixFuelTypes;
import uk.org.cse.nhm.language.definition.tags.Tag;

@Bind("extra-charge")
@Doc({ "A transaction that occurs in addition to the normal fuel charges incurred by a dwelling. Charges an amount based on a function and pays it to a global account." })
@DependenciesCannotMixFuelTypes
public class XExtraCharge extends XTariffCharge {
	public static class P {
		public static final String fuel = "fuel";
		public static final String tags = "tags";
		public static final String dependsOn = "dependsOn";
	}

	private List<Tag> tags = new ArrayList<>();
	private XFuelType fuel;
	private List<XExtraCharge> dependsOn = new ArrayList<>();

	@Override
	@BindNamedArgument
	@Identity
	public String getName() {
		return super.getName();
	}

	@Prop(P.tags)
	@Doc("Extra tags to put on transactions generated by this charge.")
	@BindNamedArgument
	public List<Tag> getTags() {
		return tags;
	}

	public void setTags(final List<Tag> tags) {
		this.tags = tags;
	}

	@Override
	@BindNamedArgument
	@Prop(XTariffCharge.P.payee)
	@Doc({ "The name of the account which will receive the money paid.",
			"If this account does not exist, it will be created.",
			"If no account is specified, the name of the policy will be used." })
	public String getPayee() {
		return super.payee;
	}

	@Prop(P.fuel)
	@BindNamedArgument()
	@Doc({
			"A fuel to associate this extra charge with.",
			"If a fuel is specified, this extra charge will be calculated as part of that fuel. It can read the transactions generated for that particular fuel type.",
			"If no fuel is specified, this extra charge will calculated after the rest of the fuel bill. It can read the transactions generated for the whole fuel bill." })
	public XFuelType getFuel() {
		return fuel;
	}

	public void setFuel(final XFuelType fuel) {
		this.fuel = fuel;
	}

	@Prop(P.dependsOn)
	@BindNamedArgument("depends-on")
	@Doc({
			"Enforces the order in which extra charges should be run.",
			"This is useful if you are adding charges which may interact with each other, and want to force them to run in a particular order.",
			"The charges listed here must be of the same fuel type (if any) as the charge that depends on them.",
		})
	public List<XExtraCharge> getDependsOn() {
		return dependsOn;
	}

	public void setDependsOn(final List<XExtraCharge> dependsOn) {
		this.dependsOn = dependsOn;
	}
}
