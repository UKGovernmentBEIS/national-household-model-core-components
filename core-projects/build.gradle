plugins {
  id 'pl.allegro.tech.build.axion-release' version '1.4.1'
}

ext.libs =
  [
   junit: "junit:junit:4.11",
   mockito: "org.mockito:mockito-all:1.9.5-rc1",
   pojomatic: "org.pojomatic:pojomatic:2.0.1",
   hamcrest: "org.hamcrest:hamcrest-all:1.3",
   
   inject: "javax.inject:javax.inject:1",

   slf4j: ["org.slf4j:slf4j-api:1.7.5",
           "log4j:log4j:1.2.17",
           "org.slf4j:slf4j-log4j12:1.7.5" ],
   slf4jSimple: "org.slf4j:slf4j-simple:1.7.5",
   guava: "com.google.guava:guava:18.0",

   reflections: "org.reflections:reflections:0.9.8",
   joda: "joda-time:joda-time:2.1",
   cglib: "cglib:cglib-nodep:2.2.2",

   ecore: [ "org.eclipse.emf:org.eclipse.emf.ecore:2.8.0-v20120911-0500",
            "org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.8.0-v20120911-0500",
            "org.eclipse.emf:org.eclipse.emf.common:2.8.0-v20120911-0500" ],

   jackson: [ "com.fasterxml.jackson.core:jackson-annotations:2.2.3",
              "com.fasterxml.jackson.core:jackson-core:2.2.3",
              "com.fasterxml.jackson.core:jackson-databind:2.2.3",
              "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.2.3",
              "com.fasterxml.jackson.datatype:jackson-datatype-guava:2.2.3" ],

   commonsLang: "org.apache.commons:commons-lang3:3.1",
   commonsIO: "commons-io:commons-io:2.4",
   commonsMath3: "org.apache.commons:commons-math3:3.1",

   lucene: ["org.apache.lucene:lucene-core:4.0.0",
            "org.apache.lucene:lucene-analyzers-common:4.0.0",
            "org.apache.lucene:lucene-sandbox:4.0.0",
            "org.apache.lucene:lucene-suggest:4.0.0" ],
   
   bval: [ "javax.validation:validation-api:1.0.0.GA",
           "org.apache.bval:bval-jsr303:0.5",
           "org.apache.bval:bval-guice:0.5" ],

   guice: [ "javax.inject:javax.inject:1",
            "com.google.inject:guice:3.0",
            "com.google.inject.extensions:guice-assistedinject:3.0",
            "com.google.inject.extensions:guice-multibindings:3.0" ],

   velocity: "org.apache.velocity:velocity:1.7",
   findbugs: "com.google.code.findbugs:jsr305:3.0.0",
   carrot: "com.carrotsearch:hppc:0.4.2",

   opencsv: "net.sf.opencsv:opencsv:2.3",
   poi: "org.apache.poi:poi-ooxml:3.9",
   dataUtil: "com.btaz.util:data-util:0.3.24"
]

ext.mavenUser = project.hasProperty('mvnUser') ? project.mvnUser : 'deploy'
ext.mavenPassword = project.hasProperty('mvnPassword') ? project.mvnPassword : 'da9fc69a5d93f07432ace3fc7015fffa4d4b032a88d267f88cb2dd5369d1b6af'

// this uses the axion release plugin to construct a version from git
scmVersion {
  // what to put on release tags to make them release tags
  tag { prefix = 'v' }
  repository {
        directory = project.rootProject.file('../')
    }
}
  
// these settings get poked into all subprojects
subprojects {
  apply plugin: 'java' // they are all java projects
  apply plugin: 'maven-publish' // for upload to maven repository
  apply plugin: 'maven'

  group = 'uk.org.cse.nhm'
  version = '6.4.0'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8
  
  repositories {
    mavenCentral()
  }

  // add the implementation version header to the manifest
  jar {
    manifest {
      attributes("Implementation-Version" : version)
    }
  }
  
  dependencies {
    testCompile libs.junit
    testCompile libs.mockito
    compile libs.slf4j
  }
}

// get everything to publish a jar, except for the integration tests which don't need to
configure(subprojects -
            project(':nhm-simulator-integration-tests') -
            project(':nhm-language-documentation') -
            project(':nhm-stock-documentation') -
            project(':sedbuk-boiler-matching') -
            project(':nhm-bundle-api') -
            project(':nhm-impl-bundle') -
            project(':nhm-cli-tools')
            )
{
  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
}}}}

// Core-Projects
project(':energycalculator.api') {
  dependencies {
    compile libs.guava
  }
}

project(':energycalculator.impl') {
  dependencies {
    compile project(':energycalculator.api')
    compile libs.slf4j
    compile libs.pojomatic
    compile libs.inject
  }
}

project(':hom') {
  dependencies {
    compile project(':energycalculator.impl')
    compile libs.ecore
    compile libs.jackson
  }
}

project(':energy-utils') {
  dependencies {
    compile project(':hom')
    compile libs.guava
    compile libs.reflections
    compile libs.slf4jSimple
  }
}

project(':nhm-core-api') {
  dependencies {
    compile project(':hom')
    compile project(':jasb')
    compile libs.guava
    compile libs.commonsMath3
  }
}

project(':jasb') {
  dependencies {
    compile libs.guava
    compile libs.pojomatic
    compile libs.jackson
    compile libs.cglib
    compile libs.commonsLang
    compile libs.commonsIO
    compile libs.slf4j
    compile "javax.validation:validation-api:1.0.0.GA"
  }
}

//Simulation-Logic
project(':nhm-batch') {
  dependencies {
    compile project(':nhm-language-definition')
    compile libs.reflections
  }
}

project(':nhm-house-property-store') {
  dependencies {
    compile project(':nhm-simulation-engine')
    compile project(':nhm-language-builder')
    compile libs.guava
  }
}

project(':nhm-language-definition') {
  dependencies {
    compile project(':hom')
    compile project(':nhm-core-api')
    compile libs.bval
    compile libs.guice
    compile libs.reflections
  }
}

project(':nhm-language-builder') {
  dependencies {
    compile project(':nhm-language-definition')
    compile project(':nhm-simulation-engine')
  }
}

project(':nhm-language-tools') {
  dependencies {
    compile project(':nhm-language-definition')
    compile project(':nhm-simulation-engine')
  }
}

project(':nhm-reportengine') {
  dependencies {
    compile project(':nhm-language-definition')
    compile project(':nhm-report-messages')
    compile project(':hom')
    compile project(':nhm-core-api')
    compile libs.velocity
    compile libs.opencsv
    compile libs.findbugs
  }
}

project(':nhm-simulation-cli') {
  dependencies {
    compile project(':nhm-simulator')
    compile project(':nhm-stock-io')
  }
}

project(':nhm-simulation-engine') {
  dependencies {
    compile project(':nhm-language-definition')
    compile project(':nhm-report-messages')
    compile project(':hom')
    compile project(':nhm-core-api')
    compile libs.guice
    compile libs.carrot
    compile libs.findbugs
  }
}

project(':nhm-simulation-measures') {
  dependencies {
    compile project(':nhm-simulation-engine')
    compile project(':nhm-language-builder')
  }
}

project(':nhm-simulation-probes') {
  dependencies {
    compile project(':nhm-simulation-engine')
    compile project(':nhm-language-builder')
  }
}

project(':nhm-simulator') {
  dependencies {
    compile project(':nhm-language-builder')
    compile project(':nhm-reportengine')
    compile project(':nhm-simulation-measures')
    compile project(':nhm-simulation-probes')
    compile project(':nhm-house-property-store')
    compile project(':hom')
    compile project(':nhm-core-api')
    compile libs.guice
  }
}

project(':nhm-simulator-integration-tests') {
  dependencies {
    testCompile project(':nhm-simulator')
    testCompile project(':nhm-batch')
    testCompile project(':nhm-simulation-cli')
    testRuntime libs.slf4jSimple
  }
}

project(':nhm-stock-io') {
  dependencies {
    compile libs.guice
    compile project(':hom')
  }
}

project(':nhm-report-messages') {
  dependencies {
    compile project(':nhm-core-api')
    compile libs.pojomatic
  }
}

// the documentation project is a bit different, because it contains code
// that nobody else really needs, but that it will use to generate the docbook
// xml that other projects do need
project(':nhm-language-documentation') {
  dependencies {
    compile project(':nhm-language-definition')
    compile libs.commonsLang
  }

  // this defines a new task which runs the language reference generator
  // to create the language reference part of the docbook
  task(generateReference, dependsOn:'classes', type:JavaExec) {
    main = 'uk.org.cse.nhm.documentation.LanguageReferenceGenerator'
    classpath = sourceSets.main.runtimeClasspath
    args 'src/examples', 'src/typedocs.s', 'src/macroexamples', new File(project.buildDir, '/outputs/langref.xml')
  }

  jar {
    // this connects the jar task up to generateReference
    // so that when we try and make a jar, we have already made the reference
    dependsOn generateReference
    // we only want xml files in the output jar
    from new File(project.buildDir, '/outputs/')
    include '**/*.xml'
    includeEmptyDirs false
  }

  // remove dependencies from the generated pom file, because the jar has no code.
  publishing { publications {
      mavenJava(MavenPublication) {
        from components.java

        repositories {
         maven {
           credentials {
            username mavenUser
            password mavenPassword
           }
           url "http://localhost:8080/maven/7b9c5ef4-16a1-4b8f-ae4e-83bb87337fdb/"
          }
        }

        pom.withXml {
          def deps = asNode().get('dependencies')
          asNode().remove(deps)
        }}}}
}

//Stock Import
project(':ehcs10') {
  dependencies {
    compile project(':spss-reader')
    compile project(':nhm-stockimport-api')
  }
}

project(':spss-reader') {
  dependencies {
    compile libs.pojomatic
    compile libs.guava
    compile libs.cglib
  }
}

project(':nhm-stockimport-api') {
  dependencies {
    compile project(':hom')
    compile libs.cglib
    compile project(':spss-reader')
  }
}

project(':nhm-imputation-schemas') {
  dependencies {
    compile project(':nhm-stockimport-api')
    compile libs.poi
    compile libs.guava
    compile libs.commonsLang
    testCompile libs.hamcrest
  }
}

project(':nhm-stockimport-ehcs10-export') {
  dependencies {
    compile project(':nhm-stockimport-api')
    compile project(':ehcs10')

    compile libs.lucene  
    compile project(':sedbuk-boiler-matching')
    
    compile libs.commonsLang
    compile libs.opencsv

    testCompile libs.hamcrest
  }
}

project(':nhm-stockimport-simple') {
  dependencies {
    compile project(':nhm-stockimport-ehcs10-export')
    compile project(':nhm-stockimport-defaultdto-import')
    compile libs.dataUtil
    compile libs.commonsIO
  }
}

project(':nhm-stockimport-defaultdto-import') {
  dependencies {
    compile project(':nhm-stockimport-api')
    compile project(':nhm-imputation-schemas')
    compile libs.commonsMath3
  }
}

project(':nhm-stock-documentation') {
  dependencies {
    compile project(':nhm-core-api')
    compile libs.reflections
    compile project(':nhm-stockimport-defaultdto-import')

    compile(project(':nhm-stockimport-ehcs10-export'))

    // unfortunately the sedbuk boiler matcher depends on
    // objectweb ASM 4, which is not interface compatible with
    // ASM 5. this gadget depends on ASM 5.
    // If we specify asm 5 manually here, gradle does the sensible thing for us.

    compile 'org.ow2.asm:asm:5.0'
  }

  task(generateReference, dependsOn:'classes', type:JavaExec) {
    main = 'uk.org.cse.nhm.documentation.StockReferenceGenerator'
    classpath = sourceSets.main.runtimeClasspath
    args 'src/main/resources/stockref.xml'
  }

  task(generateVarUsage, dependsOn:'classes', type:JavaExec) {
    main = 'uk.org.cse.nhm.documentation.VariableUsageGenerator'

    // this is not safe - we have the wrong version of ASM as usual.

    classpath = sourceSets.main.runtimeClasspath
    args 'src/main/resources/variableref.xml', 'src/main/standard-spss-stock.zip'
  }

  jar {
    dependsOn generateReference, generateVarUsage
    include '**/*.xml'
    includeEmptyDirs false
  }

  publishing { publications {
      mavenJava(MavenPublication) {
        from components.java

        repositories {
          maven {
           credentials {
            username mavenUser
            password mavenPassword
           }
           url "http://localhost:8080/maven/7b9c5ef4-16a1-4b8f-ae4e-83bb87337fdb/"
          }
        }

        pom.withXml {
          def deps = asNode().get('dependencies')
        asNode().remove(deps)
  }}}}
}

project(':sedbuk-boiler-matching'){
  ext.lucene = "4.0.0"
  dependencies {
    testCompile 	'junit:junit:4.12'
    compile 		'cglib:cglib-nodep:2.2.2'
    compile 		'org.parboiled:parboiled-java:1.1.4'
    compile		'com.google.guava:guava:18.0'
    compile		'joda-time:joda-time:2.1'
    compile 		'org.pojomatic:pojomatic:2.0.1'
    compile 		'commons-io:commons-io:2.4'
  
    compile    "org.apache.lucene:lucene-core:${lucene}"
    compile    "org.apache.lucene:lucene-analyzers-common:${lucene}"
    compile    "org.apache.lucene:lucene-sandbox:${lucene}"
    compile    "org.apache.lucene:lucene-suggest:${lucene}"
  }
}

task wrapper(type: Wrapper) {
     gradleVersion = '3.0'
}
