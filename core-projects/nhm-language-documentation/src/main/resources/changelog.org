#+OPTIONS: ^:{}
#+STARTUP: content
#+BEGIN_COMMENT
This is the language changelog written up as an org-mode document, so that it is not frustrating to edit. However, we must also produce a docbook version, for the rest of the toolchain to consume.

If you edit this file in emacs, whenever you save the file it will run pandoc to update the XML version. This is handled by the Local Variables: section in another comment block at the end of the file. Emacs will ask if you are happy applying that local variable when you start it up.

The build process will not do this for you right now, unfortunately, and you need to have pandoc installed.

This section is not included in the export because it is in a comment block.

If you want to cross-reference to a language element, you need to use the unique ID generated by the reference generator. There is a file produced by the nhm-language-documentation project in the simulator repository called 'xrefs.tsv', which lists the IDs produced for each element.
#+END_COMMENT
* Scenario Language Changelog
** Reading the Changelog

   This is the changelog for the National Household Model's Scenario Language. Each section covers the major changes introduced in a particular version of the NHM. The changes are usually under these headings:

   - *Semantic changes* are changes that may affect the meaning of existing scenarios, so if you run an old scenario its results may change
   - *New features* are new commands or arguments to existing commands which enable the model to do new things
   - *Obsolete features* are features which may be removed in a future version of the model, because they are superseded
   - *Bugs removed* will list any known errors that were found to affect the previous version which have been corrected in this version

** Released versions

*** Version 7.2.1
**** Bugs Fixed
- When using =ref.measure.warm-air-system= to replace a warm air system, the model did not preserve a connection to the central hot water system if there was one.
  This had the effect that using =ref.measure.warm-air-system= would also switch to an immersion heater, if the warm air system previously installed was providing hot water.

  This behaviour has been changed so that if you replace a warm air system that provides hot water, the new warm air system also provides hot water.
- The ~SAP2012_PHYSICAL~ calculator now works; in 7.2.0 its configuration in the scenario language was accidentally connected to ~BREDEM2012~, so it was functionally the same as ~BREDEM2012~.
- An earlier fix (in 7.1.0) for PV suitability had an accidental knock-on of making new boilers & other heat sources unsuitable in dwellings that did not already have central hot water. This mistake has been corrected.
- The change in 7.2.0 to output ~AssumedElectricHeater~ for main heating system in buildings that ended up using the assumed electric heater incorrectly reported ~AssumedElectricHeater~ if /any/ heat was provided this way, rather than main heating. This has been fixed.
- The choice of party wall u-value has been further refined to always come from the bottom two rows of RdSAP table S8B.
  These values mean that, in SAP mode, cavity party walls for flats always have a u-value of 0 and cavity party walls for non-flats always have a u-value of 0.25.
*** Version 7.2.0
**** Bugs Fixed
- The default inputs used for the =ref.health-impact-of= command were not sensible, and no defaults were supplied for some values.
  - The default for =temperature-after= is now =house.sit= rather than =(original house.sit)=.
  - The default for =temperature-before= is now =(original house.sit)=; before there was no default
  - The default for =permeability-after= is now =house.permeabililty= instead of =(original house.permeability)=.
  - The default for =permeability-before= is now =(original house.permeability)=; before there was no default
  - The default before and after for whether the house have trickle vents or fans is now taken from the =ref.original= and current value of  =ref.house.number-air-change-devices= appropriately.

- The hot water heating efficiency penalty associated with lack of a boiler interlock was not being applied in for cases where the summer and winter efficiency for the boiler are equal.
  
  This has a small impact on energy use (mean average of a 1.7% increase) in a small number of affected cases (about 350 cases in the 2014 stock):

  #+CAPTION: Weighted histogram of percentage change in SAP2012 total energy use due to correct application of boiler interlock penalty in all cases.
  [[./figures/interlock-sap.png]]

- In SAP mode, the model now uses SAP table S8B for party-wall u-values instead of SAP table 3.6.
  It also takes S8B to indicate that party walls for flats have a u-value of zero in all cases.
  Both these decisions follow direction from the BRE.

  The effect of this is as follows:

  - Masonry cavity party walls in flats now have a u-value of zero no matter what.
    Previously, if they were uninsulated they would have a u-value of 0.5.
    If they were insulated they would have a u-value of 0.
  - Insulated masonry cavity party walls in non-flats now have a u-value of 0.2.
    Previously, they would have had a u-value of zero.

  This has a significant impact on energy use for affected dwellings. 
  There are around 5000 affected cases in the 2014 stock:

  #+CAPTION: Weighted histogram of percentage change in SAP2012 total energy use due to use of table S8B. Cases with no error are omitted; this is a subset of the total 2014 stock population.
  [[./figures/party-sap.png]]

- A typo in the representative UK latitude (35.5 degrees, as opposed to 53.5) caused reduced solar gains and less useful daylight for lighting.
  The representative latitude is only used in SAP mode, so there is no effect on BREDEM mode calculations.

  #+CAPTION: Weighted scatter plot of error in SAP score due to latitude error, for EHS 2012 stock. Cases with no error are omitted to make the graph readable, and are visible in the histogram below.
  [[./figures/score-bug/score-xy.png]]

  #+CAPTION: Weighted histogram of error in SAP score due to latitude error, for EHS 2012 stock, including all cases.
  [[./figures/score-bug/score-histogram.png]]

  #+CAPTION: Scatterplot of error in energy use (in SAP mode) due to latitude error, for EHS 2012 stock. This figure is restricted to houses with energy use below 200,000 kWh/year, for clarity.
  [[./figures/score-bug/energy-most-xy.png]]

  #+CAPTION: Scatterplot of error in energy use (in SAP mode) due to latitude error, for EHS 2012 stock.
  [[./figures/score-bug/energy-all-xy.png]]

- A mis-reading of SAP table 5a caused the gains from central heating circulating pumps to be included when central heating is connected to a community heating system. However, table 5a states that they should be excluded in this case (although the electricity demand should not).

  This error has been corrected. It caused buildings with community heat connected to central heating to experience at most 87kWh/year more internal gains than they ought to have done, which will have reduced space heat demand by (at most) the same amount.

  The error affected 465 cases in the combined 2014 stock, for which the maximum change in annual energy use in SAP 2012 mode was 59kWh/year. Most (22933) cases were unaffected.

**** New Features
***** Addition of energy calculator intermediate outputs
Added =ref.house.energy-calculation-step=, a number function which allow you to look at intermediate steps in the energy calculation.
***** Addition of SAP2012 Physical Mode
A new energy calculator mode, ~SAP2012_PHYSICAL~ has been added.
This is a slightly constrained version of ~BREDEM2012~, which does not require specification of u-values or other physical parameters, but does allow changes outside the scope of ~SAP2012~.

It is documented in more detail below in the section on energy calculator modes.
***** Addition of =ref.house.heating-system-output=
This functions allows you to ask the model for the heat output from the heating system.
***** Changes to lighting model and measures
The way lights are represented in the stock has been changed to support products policy modelling.
The stock data now records information about the type of lights that are installed in a house, rather than their efficiencies. The model represents six types of light:

- Incandescent
- CFL
- Halogen
- LED
- Low-voltage Halogen
- A++

The efficiencies used for lights are determined by the energy calculator mode in use.

The measures =ref.measure.replace-lighting= and =ref.measure.set-lighting-proportions= allow the installation of new lighting or a direct change to the lighting mix in a house, and =ref.house.lighting-proportion= allows you to query what proportion of the lights in a house are of a particular type.

These changes have broken backwards-compatibility for lighting related commands, so you will need to amend any scenarios you have written which used =ref.measure.low-energy-lighting= or =ref.house.lighting-proportion= to refer to light types rather than light efficiencies.
***** Addition of BEIS mode
A new energy calculator mode, ~BEIS~ has been added. This is to support changes for products policy modelling. It has a more realistic set of lighting efficiency coefficients, and allows products policy changes to appliance and cooker efficiencies.

It is documented in more detail below in the section on energy calculator modes.
**** Improvements
- The service type for space heating has been subdivided into primary and secondary space heating.
  This means it is now possible to separately query energy use and emissions due to each heating system.
- The documentation for =ref.house.heat-load= has been improved to properly state that the heat load is determined before accounting for gains.
- The function =ref.house.heating-fuel= can now be used to ask about the heating fuel for secondary heating and hot water systems.
  Its behaviour has been changed to be more consistent with how the model works when there is no working main heating system;

  In this situation, the model assumes plug-in electric space heaters for the primary heating system (per SAP rules).
  When this is the case, =ref.house.heating-fuel= will output ~Electricity~; previously it would output the heating fuel for the secondary space heating system, even though this heating system would not be used to meet most heat demand.
- In an associated change, the command =ref.house.main-heating-system-type= now outputs ~AssumedElectricHeater~ when primary space heating is handled by plug-in electric heaters.
- Energy calculator modes have been documented in more detail - see the next section of the manual if you are interested.
- There is now a checkbox in the application's editor preferences to disable auto-indentation, in case you don't want it.
- Added extra =record-changes= property on =ref.def-report=. If you set it to "false", then you won't get the "After" columns in the report.
*** Version 7.1.0
**** Bugs Fixed
- Suitability for =ref.measure.solar-photovoltaic= is checked correctly.
  The implementation of measure suitability has been enhanced so this kind of error cannot be reintroduced for any other measure.
- =ref.measure.warm-air-system= no longer ignores fuel argument.
- =ref.measure.hot-water-tank-thermostat= checks for presence of water tank before installation.
- Fixed a problem where adding two extra fuel charges for the same fuel would give two duplicate charges instead.
- Fixed a problem with transferring money between a dwelling and a global account where it would multiply the amount by the scenario quantum instead of the weight of the particular dwelling. This affects =ref.report.global-transactions= and =ref.account.balance=
- Basement floors are now treated as if they are ground floors for heat loss, per SAP 2012 S3.10
- =ref.measure.low-energy-lighting= had no effect on buildings which had no low energy lighting to start with. It now works correctly for all buildings.
- In SAP mode, floor u-values for exposed upper floors did not account for the presence of floor insulation. This is fixed. The impact of the change is small, because there are few cases in the stock which have any exposed upper floor area. Only buildings in which storeys above the ground floor are larger than the storey below them which also have floor insulation will see an impact, and for these only for the heat loss contribution from the exposed floor area.
**** Improvements
***** General
- More information given when the desktop application fails to retrieve reports from a  remote server for a simulation job
***** Documentation
- Improved documentation for using consume function =ref.consume= Added a note about needing to take into account =ref.house.weight= if using this.
- Documentation for room heater unsuitability =ref.measure.room-heater=
- Improved suitability information for hot water tank thermostat measure =ref.measure.hot-water-tank-thermostat=
- Improved suitability information for =ref.measure.warm-air-system=
*** Version 7.0.7
This is a point release to improve the application's behaviour on Hi-DPI screens
**** Bugs Fixed
- A small bug which caused an error during validation of scenarios with an invalid stock file name has been removed.
  This should make the desktop application a little bit better behaved.
- The underlying Eclipse framework in the application has been updated to a version with better support for modern screens.
*** Version 7.0.6
This is a point release to fix a couple of omissions in 7.0.5.
**** Bugs fixed
- The suitability constraints for =ref.measure.heating-control= have been amended:
  - Warm air systems are now suitable for having a programmer added.
  - Community heating systems are not suitable for time-temperature-zone controls or delayed start thermostats.
  The documentation for heating controls suitability has also been improved.
- The =ref.house.has-heating-control= command now tests for appliance thermostat on both primary and secondary heating, rather than just primary heating.
- The value for =ref.house.permeability= was being output incorrectly (it was 365 times too big). The error was in the production of annual outputs from monthly values within the energy calculation.

*** Version 7.0.5
**** Improvements
***** Change to calculation of =ref.house.permeability=
The function can now specify whether to include or exclude deliberate ventilation from the air change rate calculation.
***** Change to calculation of =ref.house.sit=
Calculation now defines heat loss as specific heat loss + ventilation heat loss rather than just specific heat loss as before.
***** To u-values and inputs to measure =ref.measure.install-glazing=
Added in the ability to specify an air-gap for the measure.
Look-up tables for U-Values now take into account air-gap when returning u-values for glazing.
If no u-value is supplied then u-value will be take from SAP tables.
**** New Features
***** Added new function =ref.house.has-solar-thermal=
Returns true of the central hot water heating system includes a solar thermal component
*** Version 7.0.3
**** Bugs Fixed
***** Reverted macro validation fixes added as they cause errors which affect previous BEIS scenarios
*** Version 7.0.2
**** Bugs Fixed
***** House Permeability Calculation
Calculate house envelope using all surfaces not just external - Asked for by BEIS/Hideem team
*** Version 7.0.1
**** Bugs Fixed
***** Combinations.choice - now expands combinations to actual measure classes rather than nulls - caused by a bad code merge
***** Suggestions and help for macros
The desktop application now includes suggestions and help for macro arguments which are not optional.
These arguments were previously being left out, by mistake.
*** Version 7.0.0
**** New Features
***** Combinations Choice
To help with performance issues being created by using the ~combinations macro within templates combinations choice has been added to avoid the need to macro expand the scenario before validation. This expansion now happens when executing the simulation - see =ref.combination.choice=.

***** Products Modelling
To enable modelling of some products policy changes to the NHM some new scenario language elements have been added.

For modelling of changes to energy used by appliances and cooking the =ref.measure.set-adjustment-terms= function allows you to apply a linear correction factor to the energy use of appliances or cookers.

For modelling the alteration of lighting elements within a house =ref.measure.lighting= has been added to alter the types of light within a house and =ref.house.lighting-proportion= has been added to allow reporting on this.
***** Health modelling
The health impact calculations from UCL and LSHTM's HIDEEM model have been integrated into the NHM.

The =ref.health-impact-of= function allows you to compute the health impact in terms of morbidity QALYS, mortality QALYS, or avoided NHS costs which result from a given change in internal temperature or fabric permeability as a result of a measure being applied.

Some supporting functions have been added to calculating the inputs to =ref.health-impact-of=.

=ref.house.permeability= represents the permeability of the house (air change rate / area).

=ref.house.sit= and =ref.house.sit-rebate= predict a realistic internal temperature in a house.

***** house.surface-area

A function =ref.house.surface-area= has been added, this returns the area of the external envelope of the dwelling (roof, floor, walls, windows and doors).

*** Version 6.5.5
**** New Features

Put back the /desired-heat-months/ property on =ref.action.set-heating-temperatures=.

This was removed in the SAP 2012 update.

This property has different behaviour to before. It now explicitly sets which months the heating will be on for. It has no effect in SAP2012 mode.

*** Version 6.5.4
**** New Features
***** Heat loss roofs and ground floors for flats
If a flat has a storey which is the top floor of its building, then it has a heat loss roof.
Similarly, its bottom storey is the bottom floor of its building (in the EHS, it is either the basement or ground floor), it will have a heat loss floor.

The measure suitability for =ref.measure.loft-insulation=, =ref.measure.solar-dhw= and =ref.measure.solar-photovoltaic= now admits flats if and only if they have a heat loss roof.
The measure suitability for =ref.measure.floor-insulation= now admits flats if and only if they have a heat loss floor.
**** Bugs Fixed
***** U-value calculation for suspended timber ground floors

This has changed from SAP 2009 to SAP 2012. It seems likely that the SAP 2009 version was a mistake.

In SAP 2009: set Rf to 0.2, then compute =Rf + 0.2=.

In SAP 2012: compute Rf based on floor insulation thickness, then compute =Rf + 0.2=.

We now implement the SAP 2012 version.

***** Stock import of solid floors

Version 6.5.0 introduced a bug where Solid floors were being reclassified as SuspendedTimber. This is now fixed.

***** Infiltrations when resetting walls.

The /infiltrations/ property in =ref.action.reset-walls= has been broken since v6.5.0. It was setting air change rate to 0.

This is now working correctly again.

***** Bug in =ref.affected-houses=
The =ref.affected-houses= command would not work correctly if used as the source group for a =ref.filter= in more than one place within a single use of the =on.construction= command.

Each =ref.filter= applied would have a cumulative effect on the contents of the next use of =ref.affected-houses=.
**** Improvements
The manual embedded in the desktop application has had additional indexing information added to it, which improves the specificity of searches for model commands.

In addition, by reading the manual for the help facility, we have learned that enclosing search queries in double quotes ="like this"= searches for the literal occurrence of the text in quotes, rather than the occurrence of all the separate words typed in.

Taken together these changes mean that when searching for model commands like =house.energy-use=, entering ="house.energy-use"= into the help will produce much better specificity of results.
*** Version 6.5.3
We don't know where this version number went.
*** Version 6.5.2
**** New Features
***** Inclusion of a test for wall thickness
Per support ticket number 83
*** Version 6.5.1
**** New Features
***** Roof Area Function

Added =ref.house.roof-area= to allow you to look at the roof area of a dwelling. This is useful when installing a solar PV measure.

**** Bugs Fixed
***** Wall Thickness

Wall thickness was not getting set in the stock import. This resulted in incorrect u-values for old solid-wall buildings.

*** Version 6.5.0
This version of the NHM has been updated to support SAP 2012 (closely, with the scenario author prevented from putting in their own override values) and BREDEM 2012 (more loosely).

This changelog primarily covers scenario language changes. For a more in-depth discussion of the energy calculator update, see ref.sap-2012-spec.

**** New Features

***** BREDEM Specific Configuration

The following three actions allow you to change some BREDEM-specific features of a house. They have no effect in SAP 2012 mode.

=ref.action.set-site-exposure= puts a house in an exposure category. This maps to a multiplier to its infiltration rate.

=ref.action.set-interzone-specific-heat-transfer= sets the rate of heat transfer from the main living area of the house to the rest of the house.

=ref.action.reduced-internal-gains= enables reduced internal gains for that house. This is supposed to apply to modern houses.

=ref.action.set-thermal-bridging-factor= is multiplied by the external area of the ddwelling to calculate the thermal bridging heat loss rate.

***** Switch Energy Calculator Modes

The =ref.scenario= element now has an /energy-calculator:/ property. This can take the values /SAP2012/ or /BREDEM2012/, and determines which rules will apply for this scenario.

There is a new counterfactual action =ref.energy-calculator=, which allows you to temporarily look at a house in a different energy calculator mode.

***** Heat Loss Intermediate Calculations

=ref.house.heat-loss= has now has an optional (unnamed) parameter which allows you to look at specific heat-loss due to /ThermalBridging/, /Infiltration/ or /Fabric/.

If you do not specify this parameter, the behaviour will be unchanged from previous releases. You will get the total specific heat loss, which is the three terms above added together.

**** Removed Features

***** Solar PV

We have removed /roof-coverage/ and /efficiency/ from =ref.measure.solar-photovoltaic=, and replaced them with /size/, which is the peak power rating of the installation measured in kW.

***** Responsiveness

The =scale.responsiveness= action has been removed. With hindsight, it was a bad feature, and we do not believe it has ever been used.

Removed the /of:/ property from =ref.house.heating-responsiveness=, since only the responsiveness of the primary space heating system is always relevant.

***** Thermal Mass

The NHM now uses a simplified method for calculating the thermal mass of a dwelling.

=wall.k-value= has been removed.

=ref.action.reset-floors=, =ref.action.reset-walls= and =ref.action.reset-roofs= have had their /k-value/ and /party-k-value/ properties removed.

**** Semantic Changes

A number of actions in the NHM are designed for tweaking values from SAP tables. In SAP 2012 mode, they will no longer have any effect:

 + =ref.action.reset-floors=
 + =ref.action.reset-roofs=
 + =ref.action.reset-doors=
 + =ref.action.reset-glazing=
 + =ref.action.reset-walls=
 + =ref.action.set-heating-schedule=
 + =ref.action.set-heating-temperatures=

*** Version 6.4.0
**** Bugs fixed
***** Flags and reports work on def-action
If an action was used at the top level of a =ref.def-action= command with the =update-flags:=, =test-flags:= or =report:= keyword arguments, and referred to in two places within the scenario, the later references would not update or test flags, or perform reporting.
***** Mistake with hypotheses
In certain fairly rare conditions, the =rise-in=, =fall-in= and =original= functions would return the wrong result when evaluated within a hypothetical situation. This has been remedied.
***** Improvements to the manual
- The heating control measure suitability has been changed to be (hopefully) more readable
- The documentation for =ref.house.annual-cost= has been changed to be more descriptive.
**** New features
***** Multiple stocks
You can now specify multiple stocks in a scenario by supplying a list of values to the scenario's =stock-id:= argument; for example writing =stock-id: [a b c]= will use all the houses from stocks =a=, =b=, and =c= together.
This does not affect old scenarios with a single stock, but should make it easier to work with stocks for multiple countries.
***** Automatic use of =filter=
It is now possible to write logical tests in any place where you would write a group of houses.
The logical test will have an "implicit" =ref.filter= command added to it, so where you would previously have written =(filter (X))= you may now write just =(X)=.
Note that to use =filter='s second argument (a specific set to filter, rather than the whole population) you will still have to write it out in full.
***** Addition of =fail-unless=
The =ref.fail-unless= command has been added, to make a common pattern easier to write.
*** Version 6.3.2
**** Bugs fixed
***** Batch reports work properly in the desktop application
A mistake whereby only the last year's output for reports from each part of a batch run was present in the output in the desktop version of the NHM has been fixed.
*** Version 6.3.1
**** Bugs Fixed
***** Summer Boiler Efficiencies
Changed the default summer boiler efficiency to -10% (10% less than the winter efficiency) based on a re-analysis of the Product Characteristics Database 2009 (PCDB).

Added a note to the manual to explain when this number is and is not likely to be accurate.

**** New Features
***** Choose how to weight your stock.
      =ref.scenario= now has a field /weight-by:/ which accepts any number, or any function of a house which produces a number.

      The intention is that you could use =ref.house.static-number= here to weight based on the household weight instead.

      The default value for the /weight-by:/ field is =weight-by: (house.weight)=. This weights by the survey's dwelling case weight, so this feature will not change the behaviour of any existing scenarios.

**** Semantic Changes
***** Stock weights are now decimals
      Previously, you could input the dwelling case weight and household case weight in the stock as decimals, but they would be rounded to integers before use.

      We have removed this rounding step.

*** Version 6.3.0
    These are fixes relating to [[https://cseresearch.atlassian.net/browse/EXS-108][EXS-108]].

**** Bugs Fixed
***** Space heating systems used the total hot water fraction
      Space heating systems were incorrectly calculating their share of the space heating output by comparing their space heating fraction to the total hot water fraction (summed over all sources of hot water). This bug has now been fixed.

**** Obsolete Features
***** Point-of-use-hot-water
      =ref.measure.point-of-use-hot-water= is now obsolete. This measure was used as a backup water heater when a dwelling's boiler was broken. This backup behaviour now happens automatically as specified by SAP, so the measure is no longer useful.

**** Semantic Changes
***** Space heating fraction is now derived
      The space heating fractions are now derived according to SAP 2009 when you run the energy calculator. The following rules apply:
   + If a primary heater is present, calculate the secondary heating fraction based on the primary heater, as per SAP table 11.
   + If no primary heater is present, assume 10% of the heat will be generated by secondary heaters ("Other electric heaters in SAP table 11"). Produce the other 90% from assumed portable electric heaters.
   + If no secondary heater is present, but the primary heater is a storage heater, then secondary heating is *required*. Assume the portable electric heaters are the secondary heater.
   + If no secondary heater is present, generate the remaining heat from the primary heater.

Note that, for heat-pumps, we use the /Heat pump, data from Table 4a/ entry of Table 11 (10% of heat produced by secondary system). This is because the model does not have the data required to implement the lookups in Appendix N.

***** Removed concept of water heating fraction
      SAP 2009 does not have a concept of a water heating fraction. All the hot water should be produced by the primary system if present, or the secondary system if the primary is missing, or by assumed electric heaters if no water heaters at all are present. This is now correctly implemented.

***** Automatic behaviour when breaking the boiler
      =ref.measure.break-boiler= no longer includes the properties /room-heater/ and /water-heater/. Portable electric heaters will now automatically be used as backups for missing heating systems as specified by SAP 2009.

***** Removed backup property from room heaters
      =ref.measure.room-heater= no longer has a /backup/ property. This property is no longer useful as we are automatically using portable electric heaters as backup heaters. Existing scenario which use /backup/ will need to be amended to remove it.

***** Removed scale.efficiency
      =scale.efficiency= has been removed from the language. We decided that it was redundant - you can easily create a template which does the same with other language pieces. Additionally, its behaviour was confusing when applied to homes with boilers, as they have two efficiency numbers (winter and summer).

***** Explicit winter and summer efficiency for boilers
      =ref.measure.standard-boiler= and =ref.measure.combi-boiler= no longer have a /efficiency/ property. This has been replace with two properties /winter-efficiency/ and /summer-efficiency/. These may be set as a proportion.

      There is an additional option for /summer-efficiency/: it may be specified as 0 or a negative number. In this case, our actual summer efficiency will be that much lower than /winter-efficiency/ value.

      The default value for /winter-efficiency/ is the same as the previous default value for /efficiency/.

      The default value for /summer-efficiency/ is -1%. (That is, 1% lower than winter efficiency). This is based on a linear regression against the 2009 Product Characteristics Database (PCDB) data, which found this relationship to be true for almost all boilers in that dataset.

***** Renamed measure.change-boiler-efficiency
      =measure.change-boiler-efficiency= has been renamed to =ref.action.change-efficiency=. It's /to/ argument has been removed and replaced with /winter-efficiency/ and /summer-efficiency/, which behave in a similar way as described above for installing boilers.

      One of /winter-efficiency/ or /summer-efficiency/ may be left unset for this action, in which case the existing value will be kept.

      /winter-efficiency/ is also used as the main efficiency for other types of heaters than boilers (and as COP for heat pumps).

      /summer-efficiency/ is ignored for heaters which are not boilers.

***** house.heating-efficiency changes
      =ref.house.heating-efficiency= now has an additional property /measurement/.

      This can take one of three values: /Winter/, /Summer/ and /InSitu/.

      Winter and Summer return the relevant seasonal efficiencies for boilers, and are identical to the previous behaviour of house.heating-efficiency for other kinds of heat sources.

      InSitu calculates an effective efficiency for the heating system by taking the amount of heat it supplied and dividing it by the amount of fuel it used. This is useful if you want to get an idea of the effects of SAP's internals.

*** Version 6.2.2 [8th October 2015]
**** Bugs Fixed
***** house.all-walls matched all houses
      A mistake in the code for =ref.house.all-walls= caused it to be true in all cases. This bug has now been removed.
***** house.sum-transactions case-sensitivity
      The =ref.house.sum-transactions= function was unable to restrict the transactions summed using transactions whose tags included capital letters. This made it impossible to sum capital cost transactions, as they are tagged =:CAPEX=; behind-the-scenes this was caused by the automatic lowercasing of all user-entered flags and tags, but a lack of lowercasing of the built-in tags.

      This has been fixed so that the transaction matching is consistent with all other tag matching (it is case-insensitive).
***** Transaction tags reference includes capex
      The automatically generated list of all default transaction tags accidentally omitted the =:CAPEX= tag; that tag should now be in the list.
**** New features
***** Improvement to =select.weighted=
      The documentation to =ref.select.weighted= has been improved in response to user feedback, and the weight function can now be specified as the first argument without having to use the superfluous =weight:= keyword.
***** Easier date specification
      As many of the dates written in scenarios are annual, you can now write years instead of full dates to indicate the first of January; for example, =01/01/2014= can now be written simply as =2014=.

      In addition, annual date ranges which previously were written as 'regularly' can now be written as two literal dates with two dots between them. For example =01/01/2014..01/01/2020= is equivalent to =(regularly from:01/01/2014 until:01/01/2020)=. This also admits the above shorthand, so you can write =2014..2020=.
***** Improvement to =ref.house.sum-transactions=, =ref.net-cost=, =ref.predict-obligations= and other transaction-related functions
      All functions which match transactions can now specify a list of required and forbidden tags using patterns, which work in the same way as the =test-flags:= argument on measures. This should simplify the production of aggregate information.
**** Semantic changes
***** Changes to built-in tags
      In previous versions, all built-in transaction tags started with a colon, like =:CAPEX=, =:subsidy= and so on. All of these tags are still produced, but additional tags are also added which don't start with a colon, like =CAPEX= and =subsidy=. This makes it easier to write commands which match these tags.
*** Version 6.2.1 [Not published]
**** Bugs Fixed
***** Stock import not using draught stripped proportion
      A mistake in the DTO importing code caused the draught stripped proportion field to be ignored, leaving dwellings in the stock with a draught stripped proportion of 0 (the default if unspecified).
      This bug has been fixed, but will only affect newly imported stocks.
*** Version 6.2.0 [Not published]

    This version was not published, and only exists for technical reasons of little interest.

**** New features
***** More useful handling of =Electricity= as a fuel
      The =Electricity= fuel type is normally only used in the model to describe what kind of heating system you want to put in, or what the heating fuel of a house is. Energy use is broken down into =PeakElectricity= and =OffPeakElectricity=, and the =Electricity= consumed is internally always zero (to prevent double-counting).

      In response to DECC request EXS-64, the definition for =ref.house.energy-use=, =ref.house.fuel-cost= and =ref.house.emissions= have been amended to treat the argument =by-fuel: Electricity= as a special case, which will always compute the sum of the values that would be produced if you used =by-fuel:PeakElectricity= and =by-fuel:OffPeakElectricity=.

      The behaviour of these terms and the rest of the model is unchanged in all cases except when =by-fuel: Electricity= is supplied, so (for example) you will still want to supply separate peak and off-peak prices in tariff definitions.

      This change was made to resolve JIRA ticket EXS64.
**** Semantic changes
***** Change to =Electricity= handling in =ref.house.fuel-cost=, =ref.house.energy-use= and =ref.house.emissions=
      As mentioned in /new features/ above, these functions now behave differently if you use them with the argument =by-fuel:Electricity=. Previously =house.energy-use= and =house.emissions= would always return zero, and =house.fuel-cost= /could/ produce a value, but only for strangely defined tariffs. These functions will now compute the sum of the values for =PeakElectricity= and =OffPeakElectricity= instead.
*** Version 6.1.0 [30th July 2015]
**** New Features
***** Addition of =ref.house.flags= and extension of flag matching
      The =ref.house.flags= element has been added, which is useful in reports to output which flags from many possibilities are are on a house, rather than producing one column for each flag. This was added to make a scenario for the CCC easier to analyse.

      As part of this change, the rules for matching and adjusting flags have been extended (in a backwards-compatible way) to support more complicated pattern matching. To give some examples, you can now use =test-flags: [something-*]= to test whether a house has a flag starting with =something-=, or =update-flags: [!something-* something-or-other]= to remove all flags starting with =something-= and then add a flag =something-or-other=. More complicated patterns are supported; see the documentation for a flag related element for more details.
***** Addition of =ref.house.has-solar-photovoltaic=
      You can now use =ref.house.has-solar-photovoltaic= to test whether a house has solar PV or not. This was added as a request from DECC central modelling.
***** Improved performance for loans
      The model's performance when simulating many loans should now be faster, especially when loans have the =tilt:= parameter specified. This work was done whilst looking at a scenario which involved a lot of loans.
***** Change to the handling of build year in stocks
      In response to JIRA request EXS-43 the way dwellings are created from stocks has been changed so that houses are constructed on their build year; this is the very first thing that happens in each year.

      To make this easier to use correctly in a scenario, the top-level =ref.on.construction= command allows you to schedule commands to be run whenever new dwellings are constructed.
***** Amendment to =ref.summarize=
      The =ref.summarize= command now allows the set to summarize to be specified as the second unnamed argument, as well as using named argument =group:=. This change was made to improve consistency with other set-processing commands. The existing syntax remains compatible.
**** Semantic changes
***** Change to the handling of build year in stocks
      Because cases from the stock now only appear in the simulation from the start of their build year onwards, old scenarios whose start date was earlier than the build date of some cases in a stock may produce different results, as previous anachronistic dwellings will no longer be present in the simulation. For example, if you were to run a scenario with start date 1/1/0000 it would now typically have no houses at scenario start.
**** Bugs fixed
***** Error in =repeat= removed
      In previous versions the =ref.repeat= command would incorrectly preserve only the value of the first modified variable defined to be =on:simulation= when more than one such variable was used in the =preserve:= argument. The =preserve:= argument now works correctly.
*** Version 6.0.0 [8th June 2015]
**** Semantic changes
***** Change to random number generation
      Unfortunately the mechanism introduced to support repeatable use of random numbers within the =ref.scheduling.repeat= command in v5.1.4 also introduced some statistical artifacts in random numbers consumed within hypotheses that never become true. For example, if you were to use a uniform random number to perturb the objective in the =ref.in-order= command, it would not be as uniform as it should be. In this version those artifacts have been fixed, at the expense of consistency of randomness between the two versions.

      This issue was detected during the development of RHI scenarios.
***** Stricter validation of =ref.lookup= and =lookup-table=
      In previous versions, you could define a =ref.lookup= or =lookup-table= which tried to match functions on values they would never produce (for example, checking whether a dwelling's region was =MainsGas= by mistake). From this version onward, the coordinates in lookups and lookup tables are validated against the possible values for the associated key function.

      This change was made in response to a mistake in an RHI policy scenario where the wrong key function was accidentally used, which caused unexpected behaviour in the scenario.
***** Stricter validation of =ref.is=
      =ref.is= now produces validation warnings if some of the values to match are not possible outputs from the function being tested. For example, if you were to write =(is house.heating-fuel MiansGas)= (a typo), a validation error message will be produced which indicates that =MiansGas= is not a possible value for =house.heating-fuel=.

      This change was made because of confusion during the development of RHI scenarios caused by its lack.
***** Defaults in =ref.context.carbon-factors=
      In previous versions of the model, the default carbon factors were taken from SAP 2009. If you specified new carbon factors using =ref.context.carbon-factors=, the defaults would be entirely replaced. For example, writing

      #+BEGIN_SRC lisp
        (context.carbon-factors
         (group fuels:PeakElectricity
                carbon-factor: 0.5))
      #+END_SRC

      would set the =PeakElectricity= factor to 0.5, and all other factors to an implicit zero. This has been changed so that the default SAP 2009 carbon factors are retained unless a =group= in =ref.context.carbon-factors= replaces them.

      This change was made in response to some confusion caused in a scenario developed by the CCC.
***** Restricted precision in efficiencies
      The precision with which efficiencies are represented has been restricted to 0.1% across the model.

      This change was needed to improve memory efficiency so as to make some complex scenarios developed for the RHI feasible to run.
***** Reduced precision for energy use and carbon emissions
      The precision with which energy use and carbon emissions are represented has been reduced from a 64-bit IEEE 754 floating point number to a 32-bit IEEE 754 floating point number. This should not have any practical impact, but it will produce very small changes in the values produced by existing scenarios for these quantities, and marginally reduce the precision with which they can be represented. However, the loss of precision will be far from the decimal point.

      This change was needed to improve memory efficiency so as to make some complex scenarios developed for the RHI feasible to run.
**** New features
***** Hybrid Heat Pumps and Gas Heat Pumps
      The model's representation of heat pumps has been changed to allow non-electric heat pumps and hybrid heat pumps to be represented. Existing heat pumps in scenarios will still default to electricity, as these changes only take effect when the new parameters to =ref.measure.heat-pump= are supplied.

      The treatment of non-electric heat pumps is identical to electric heat pumps, except the fuel consumed is all of one sort (rather than being peak / off-peak). The =fuel:= argument to =measure.heat-pump= can be used to select a fuel.

      Hybrid heat pumps are represented in a manner suggested by the RHI team; three additional parameters are provided:

      1. =hybrid-fuel:=, which specifies the fuel used by the burner in the hybrid part of the heat pump,
      2. =hybrid-efficiency:=, which is computed to determine the efficiency of the hybrid part of the heat pump, and
      3. =hybrid-ratio:=, which is a list of twelve numbers intended to be used to set the heat-pump to hybrid burner output fraction in each month of the year.

      When a hybrid heat pump is installed, all hot water is produced using the hybrid fuel at the hybrid efficiency. In each month of the year, space heat is produced according to the hybrid ratio for that month (if the hybrid ratio is 1, all space heat is produced from the hybrid fuel at the hybrid efficiency; if 0, the space heat is produced using the heat pump as normal).

      This is in line with the indications given in [[#http://www.daikin.co.uk/binaries/FINAL%20-%20Installer%20Brochure%20-%2010.02.2014_tcm511-305363.pdf][this documentation]] about the Daikin Altherma hybrid heat pump.

      /Users should note/ that this approach suffers from the same problems as using an average seasonal performance factor for a heat pump, but with some additional complications. The performance of a heat pump is determined by a (typically asymmetric, nonlinear) function of the circulating temperature and the heat store temperature. These two values are in turn functions of exterior temperature, emitter performance, the dwelling's heat loss, and thermostat settings. A choice of SPF, and equally of the monthly hybrid ratios, implies a choice of distribution over all of these factors which can then be used to produce an average performance; such an average performance will by systematically biased when the distribution over one of the factors changes (for example when considering the geographical relationship to climate). In addition, because a hybrid heat pump is likely to select fuel based on /economic/ considerations, the hybrid ratios also imply an additional choice of relationship between the costs of different fuels.

      These changes were added to aid modelling the RHI.
***** Opimisation with the =ref.in-order= element
      To support modelling the renewable heat incentive, the =in-order= command has been added. This is a fairly flexible command which can perform actions in an optimal order presuming certain conditions pertain (mainly that the quality of the actions must be independent). This can be used to allocate the most cost-effective measures subject to supply-chain constraints, for example.

      This was added to support modelling the RHI, and the CCC's analysis of the fifth carbon budget.
***** Defining supply chains with the =ref.consume= command
      As a convenience for representing supply chains, or other constrained resources the =consume= command has been added.

      It is an action which either takes some amount off a variable representing a limited quantity, or fails if there is not enough left for that to be possible. Used within a =do= command, it prevents the command from exhausting the limited resource.

      This was added to support modelling the RHI, and the CCC's analysis of the fifth carbon budget.
***** Computing expected future values (like present cost) with =ref.future-value=, =ref.exponential-discount= and =ref.house.annual-cost=

      To support modelling the renewable heat incentive, and because it will be of wider user, the old =npv= function has been superseded by a more flexible replacement set of tools.

      Firstly, the =future-value= element has been added; this will predict the (un-discounted) sum of any other function over some horizon. To produce a discounted sum, the =exponential-discount= term has been added, which computes an exponentially discounted version of another function, when used inside =future-value=. Finally, since the previous version of npv always computed the discounted sum of all annual costs a house would have to pay, the =house.annual-cost= element has been added.

      The behaviour of the old NPV can be reproduced with:

      #+BEGIN_SRC
      (def-function old-npv
        (+ (net-cost)
           (future-value
            predict:[]
            horizon:10
            (exponential-discount
             rate:5%
            (house.annual-cost)))))
      #+END_SRC

      However, unlike the old NPV, you can modify the function to be predicted (so it can be a restricted subset of costs, or something which is not a cost), you can change the discounting rule to be anything you would like (for example, =ref.hyberbolic-discount= has also been added), and you can control which time-sensitive aspects of the calculation should or should not be predictable.

***** Predicting annual costs with =ref.house.annual-cost=
***** Newly named =ref.capital-cost= and =ref.net-cost=
=capital-cost= is a new name for =cost.capex=, and =net-cost= is a new name for =cost.sum=. These were chosen with the RHI team, to try and make functions using them more readable. Their documentation has also been improved.
***** Unified reports with =ref.def-report=
      Aggregate and probe reports have been replaced with a single unified syntax for defining a report in the =def-report= command.

      To use this, you write =def-report= in your scenario to define a new report, and then you can use the =send-to-report= action or the =report:= argument on most actions in the model to report on a house. For example

      #+BEGIN_SRC
        (def-report my-report
          (cut name:by-morphology MORPHOLOGY FORM)

          (column name:ENERGY value: house.energy-use aggregates: [mean min max])
          (column name:MORPHOLOGY value: house.morphology)
          (column name:FORM value: house.built-form))
      #+END_SRC

      Defines three outputs:

      1. a disaggregated report with the three named columns, called =my-report=
      2. a default summary report, with the mean, min and max of the energy column, broken down by where the report is used and the success or failure of measure that communicate with it, called =my-report-summary=
      3. an additional summary report with the mean, min and max of the energy column broken down by morphology and built form, called =my-report-by-morphology=

      To use the report, you can then write

      #+BEGIN_SRC
        (on.dates (regularly)
                  (apply (send-to-report my-report)))
      #+END_SRC

      This will update the disaggregated and aggregated outputs every year

      In addition, where you would previously have used a =probe= around a measure, you can now write:

      #+BEGIN_SRC
        (measure.wall-insulation type:cavity ... report: my-report)
      #+END_SRC

      This will log into the report before and after any house has this measure applied to it, including information about:

      - all the requested columns
      - what house is being reported on
      - why the house is being reported on (i.e. which measure sent it to the report)
      - the date
      - whether or not the state of affairs in the report is ultimately selected to become true (for example when used in a choice alternative)

      This feature was added with the =in-order= command, to provide an easy way to see disaggregated and aggregated effects of performing it. There was no existing feature which would allow disaggregated information from such a command.

***** Consistent heating fuel with =ref.house.heating-fuel=
      The =house.main-heating-fuel= command produces an inconsistent coding with all other parts of the language that refer to fuels, which used underscores to separate words rather than uppercase (so =MainsGas= was instead =MAINS_GAS=). =ref.house.heating-fuel= has been added as an alternative which uses a consistent coding.

      This change was made as the confusion caused some unexpected mistakes in the development of RHI scenarios.
***** Addition of =ref.round= function
      The =ref.round= function allows you to round a numeric value to the nearest, least greater, or greatest lesser multiple of of another. This was added to help express uncertainties in the renewable heat incentive, without having ridiculous degrees of spurious precision.
***** Increased memory efficiency
      To support modelling some RHI scenarios, various bits of the model have been tuned to be more memory efficient. This should also improve the speed of validation, and the speed with which large scenarios run. It may also marginally reduce the speed with which simpler scenarios run, as an unvaoidable trade-off.
**** Obsolete features
***** Categorical function =ref.house.main-heating-fuel=
      As mentioned, this has been superseded by =ref.house.heating-fuel=. The old form has not been removed, so the semantics of existing scenarios are unchanged. However, it is a potential pitfall, and ought to be phased out.
***** Renaming of =ref.cost.sum= and =ref.cost.capex=
      As mentioned above, =cost.sum= has been renamed to =net-cost= and =cost.capex= to =capital-cost=. Their meaning is unchanged, but their previous naming has repeatedly caused some confusion; in particular, =net-cost= seems like more appropriate terminology.

      This change was made to clarify the definition of NPV functions in RHI and CCC scenarios.
**** Bugs removed
***** Delayed actions are no longer scheduled if they are in a hypothesis which does not succeed
      In previous versions, if you used =ref.action.delayed= within a hypothetical which was not selected, the action would still be performed. For example, writing
      #+BEGIN_SRC
        (under
         (action.delayed
          action: (measure.wall-insulation)
          delay: "0 seconds")
         evaluate:1)
      #+END_SRC
      Would cause the house to get wall insulation, even though the measure was happening in an =under= statement and so should have no side-effects.
*** Version 5.1.4 [March 2015]
**** Semantic Changes
     - The addition of =repeat= required a change to the way random numbers are stored and moved in the scenario. This will change the behaviour of existing scenarios which use random numbers. As of this version, using a random number within one hypothetical condition does not affect the random numbers produced in other hypothetical conditions. This means that, for example, when the repeat action repeats a use of the =sample= command, the same sample is produced.
     - Insulation measures have been changed so that they will no longer validate without having a thickness supplied.
**** New Features
***** Addition of =ref.scheduling.repeat=
      A new element =ref.scheduling.repeat= has been added, which can be used inside =on.dates= to repeat the execution of things like =apply= until a particular condition is met.

      In addition, the repeat element can be configured to re-try its actions from scratch, preserving only the side-effects on a user-defined list of variables, allowing for a very limited kind of optimisation. For example, you can repeatedly attempt the offering of a subsidised measure with a non-linear takup against subsidy level, preserving only changes to the level, until sufficiently many measures are taken up.
***** Stricter validation of insulation measures
      All the insulation measures have been modified so that they /require/ a value for the =thickness:= argument. In previous versions, it was legal to write the measures without a thickness, but the default value for the thickness, resistance and u-value are all zero. The way that the model keeps track of the presence of insulation is through a change to the thickness, so a measure without a thickness would not affect the insulated status of the wall, as far as the model is concerned.

      Since this caused some understandably confusing results, a validation rule has been added requiring the thickness to be positive.
**** Bugs removed
***** Mistake in =ref.decrease=
      In previous versions, the implementation of decrease was reversed, so that =(decrease x 1)= was equivalent to =(set x (- 1 x))= rather than =(set x (- x 1))=.
*** Version 5.1.3
**** Language Changes
***** Improvement of =interpolate=
      The =ref.interpolate= function has been improved to support linear interpolation into an arbitrary piecewise curve; instead of interpolating between two points, you can now specify as many points as you like. This is also possible using the =lookup-table= macro, but a direct use of interpolate may be easier to read and write, and can extrapolate beyond the ends of the function if desired.

      This is intended to be useful for specifying pricing or sizing functions derived from real data, and was done for modelling the RHI.
***** Improvement of =finance.with-loan=
      =ref.finance.with-loan= has been improved so that the =term:=, =rate:= and =tilt:= arguments can all be specified using run-time functions rather than fixed constants.

      These changes were required for modelling the RHI.
***** Change to definition of NPV
      =ref.npv= has been redefined so that the =discount:= argument is used to discount future costs according to a annual geometric progression whose multiplier is 1/(1+rate). Previously, the discount argument discounted costs according to an annual geometric progression with a multiplier of (1-rate).

      This makes the discount rate for NPV analogous to the current rate of interest, rather than the degree of depreciation of uninvested capital as it was before.

      This change was required for modelling the RHI.
*** Version 5.1.2
    This version number was skipped for reasons to boring to describe.
*** Version 5.1.1
**** Language Changes
***** Sequencing of probe outputs
      Probe elements behaviour has been changed so that report columns are produced in the same order as the =capture:= argument lists them.  Previously they were produced in alphabetical order. In a related change, the documentation for probes has been updated to point out that the =name:= argument for any probed value can be used to determine the column heading in the report.
***** Improvement of solar PV model
      The solar photovoltaic model now distinguishes between energy used within the dwelling and energy exported to the grid. Scenarios can set the maximum proportion of generation which can be used within the dwelling, and a new fuel type has been introduced to allow the price for exported electricity to differ from the price of consumed electricity.
***** Improvement of =ref.action.remove-fuel-charge=
      =action.remove-fuel-charge= can now be used to remove /all/ additional charges included in a dwelling's tariff, without having to know which charges may have been added. This is useful in performing a calculation within an =under= function in which you want to be sure that a certain set of tariffs are being used, such as when calculating a SAP score.
***** Addition of random number state to sequence report
      The sequence report now has an additional column which gives the random number generator's internal state after each event is processed. This is only useful for determining at what point the random behaviour in two different runs has diverged.
***** Improvements to include and ~module
      To help with the creation of reusable modules, a new include elemnt has been added, =include-modules=, which /only/ includes modules or other =include-modules= statements in the top level of the referenced scenario. In addition to this, it is now legal to define a module twice; only the first definition has any effect.

      The upshot of this is that if you have modules which depend on each other, you no longer need to make sure you only include each of these dependencies once.

      In addition, local names within a module can now be written directly by prefacing them with a slash; for example, the following

#+BEGIN_SRC lisp
    (~module M
          (template T [] /my-identifier))
#+END_SRC

      is equivalent to

#+BEGIN_SRC lisp
    (template M/T [] M/my-identifier)
#+END_SRC

      This special handling also applies to names starting with =#/= or =!/=, in which cases the module name is inserted before the slash, but after the punctuation.
***** In-scenario assertions added
      To make it easier to check scenarios are working as intended, the =ref.assert= element has been added to the language. This can be used within any of the scheduling elements (like =on.dates=), to test that a given condition holds at a certain point in the scenario, either for every house in a particular set, or for the simulation as a whole. Assertions can be configured to produce a warning, or to stop the simulation from running if they fail.
***** house.insolation element added
      =ref.house.insolation= is a new element which lets you determine the average amount of insolation on an inclined plane under current weather conditions for the house, in kWh/year.

      This was added to support modelling the RHI, specifically to implement the MCS methodology for sizing solar thermal.
***** house.air-change-rate added
      =ref.house.air-change-rate= is a new element which lets you access the energy calculator's prediction of the air change rate within a house.
***** house.volume added
      =ref.house.volume= is a new element which provides the volume of a house in cubic metres.
***** house.heat-load added
      =ref.house.heat-load= is a new element which provides the mean heat load in a house. It was added to support modelling the RHI.
***** Simpler referencing
      In previous versions of the NHM, references to previously defined variables, actions, tests and so on had to be preceded with a =#= symbol. It is now possible simply to use the name, without a =#= symbol, although the old syntax is still supported.
***** Improved error messages
      The error messages associated with some common scenario mistakes have been improved, to better signal the nature of the error.
***** Bounds checking on values calculated at runtime
      Most values which are computed at runtime are now bounds-checked, and warnings will be generated if they are not sensible. Checked values include heating system efficiencies, sizes, capex, opex, and hot water tank sizes; for example, if a measure's pricing function produces a negative price, a warning will be generated and the price will be clamped to zero.
***** Profiling information
      The top-level scenario element now has an argument =profile-depth:= which can be used to profile the running of your scenarios; if it is set to a positive number, an additional report will be generated showing how long different parts of the scenario are taking to run.
***** Multiple-value set, with counterfactuals
      The =set= action can now set multiple values at once, and can impose a counterfactual condition for computing those values. This makes it a more efficient alternative to repeated use of the =under= function, for example in the case where disaggregated fuel use is required under some complex set of counterfactual assumptions:

#+BEGIN_SRC lisp
    (set
          [mains-gas electricity]
          [(house.energy-use by-fuel:mainsgas) (house.energy-use by-fuel:peakelectricity)]
          under:(my-assumptions-template))
#+END_SRC

**** Bugs Fixed
***** Uninsulated lofts imported correctly
      An oversight in the stock import code which meant that only dwellings with some loft insulation were considered to have a loft has been corrected; the EHS variable =FLITYPES= in the =services= file is now used to determine the presence of a loft. This increases the number of dwellings suitable for loft insulation in most stocks.
***** Non-determinism eliminated
      A programming error which produced a very occasional non-determinism between runs has been eliminated, ensuring total repeatability of pseudorandom model behaviour.
***** Validation faults corrected
      A fault in =set= which broke the validator when the first argument (the variable to set) could not be resolved has been corrected.

      Various other validation errors have been made more informative.
***** Energy calculation ventilation effects corrected
      A fault in the energy calculator has been corrected. Previously, the SAP adjustment which increases household ventilation in low-ventilation buildings was applied /before/ the SAP adjustment which takes account of local wind speed when calculating the air change rate for a house. This caused a small excess increase in air change rate for those houses in which the structural air change rate was below 1, but the effect of local exposure would have raised it above one. The adjustments are now applied in the correct order (exposure effects first, occupants' adjustment second).

      The effect of the correction is small; under SAP 2012 assumptions, for the EHS 2012 stock, the mean energy use has decreased from 22772.73 kWh/year to 22753.2 kWh/year. The maximum has been reduced from 323656 to 323616, and the minimum from 3206 to 3162
*** Previous versions
    This changelog ends here; there are changelogs for previous versions stored in the source control system, which are available on request.
** Future features
   These are features which have been requested for future versions.
*** Commands to create houses from archetypes
    At the moment houses can be copied with =ref.action.construct= or destroyed with =ref.action.demolish=. These commands are of limited use because:

    - They can only create copies of existing houses
    - They cannot reweight the copies

    In a future version, the stock will be extended to allow storage of /archetypal/ houses, with zero weight, which represent buildings that might be constructed in the future. New language commands will allow you to construct new houses within simulation by creating them from the archetypes in the stock. This will allow you to define expectations for new build, without having to find analogous existing houses and copy them.
#+BEGIN_COMMENT
This tells emacs to run pandoc on save. This comment needs to be near the end of the file, as emacs only looks for buffer specific variables near the end.

The command which gets run is this:

(shell-command "pandoc -f org -t docbook changelog.org --top-level-division=chapter | sed 's! id=\"\"!!g' | sed 's!<chapter>!<chapter xmlns=\"http://docbook.org/ns/docbook\">!g' | sed 's!<literal>\\(ref\\..\\+\\)</literal>!<xref linkend=\"\\1\"/>!g'")

It has some escapes in it because it is a lisp string getting passed to the shell.

Written out and unescaped it is

pandoc -f org -t docbook changelog.org --chapters |                        convert this file to docbook with pandoc
    sed 's!id=""!!g' |                                                     remove id="" from the thing - pandoc makes this and it upsets maven docbook
    sed 's!<chapter.*>!<chapter xmlns="http://docbook.org/ns/docbook">!g' |  add the docbook namespace to the top-level chapter - pandoc does not put this in
    sed 's!<literal>\(ref\..\+\)</literal>!<xref linkend="\1\/>!g'         finally, fix cross-references written in the org-mode source

To explain about cross-references:

- we need to refer to stuff in the other docbook xml from this file
- the IDs of those things are not known to org mode or to pandoc
- both org and pandoc fail if you refer to an unknown thing, so
- we use a hack; in this file, to refer to one of the other things in the docbook
  we write =ref.the-thing=; this is converted into <literal>ref.the-thing</literal>
  in docbook, which we then regex to <xref linkend="ref.the-thing" /> which happens
  to be a legal cross ref if we got it right.

In the local variables line below we have eval:, which is a special local variable that runs some emacs lisp.
The lisp we are running adds the lisp above onto the after-save-hook, which is a list of functions to call after saving.

Local Variables:
eval: (add-hook 'after-save-hook (lambda () (shell-command "pandoc -f org -t docbook changelog.org --top-level-division=chapter | sed 's! id=\"\"!!g' | sed 's!<chapter.*>!<chapter xmlns=\"http://docbook.org/ns/docbook\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">!g' | sed 's!<literal>\\(ref\\..\\+\\)</literal>!<xref linkend=\"\\1\"/>!g' > changelog.xml")) nil t)
End:
#+END_COMMENT
