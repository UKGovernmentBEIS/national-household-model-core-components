package uk.org.cse.nhm.energy.util;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.reflections.Reflections;

import com.google.common.base.Joiner;

import uk.org.cse.nhm.energycalculator.api.ConstantDescription;
import uk.org.cse.nhm.energycalculator.api.IConstant;

/**
 * Makes a handy reference to all the constants tables, in org format or as an enum to go into the XML mapping for it.
 * 
 * Also prints out the XML mapping table
 *
 * @author
 */
public class ConstantsTableGenerator {
	private interface IPrinter {
		void printValue(String string, String descr, String val) ;
		void printHeader(Class<? extends IConstant> clazz, String string) ;
	}

	private static class Org implements IPrinter {
		
		@Override
		public void printValue(final String string, final String descr, final String val) {
			System.out.println(String.format("| %s | %s | %s |", string, descr, val));
		}

		@Override
		public void printHeader(final Class<? extends IConstant> clazz, final String string) {
			System.out.println("**** " + clazz.getSimpleName());
			System.out.println(string);
			System.out.println("| Name | Description | Default Value (s) |");
		}

	}
	
	private static class Csv implements IPrinter {
		private final StringBuffer sb = new StringBuffer(
				"variable\tdescription\tvalue"
				);
		private String prefix;
		
		
		
		@Override
		public void printValue(final String string, final String descr, final String val) {
			sb.append(
					String.format("%s.%s\t%s\t%s\n", prefix, string, descr, val));
		}

		@Override
		public void printHeader(final Class<? extends IConstant> clazz, final String string) {
			prefix = clazz.getSimpleName();
		}
		
		@Override
		public String toString() {
			return sb.toString();
		}
	}
	
	private static class En implements IPrinter {
		final StringWriter ew = new StringWriter();
		final StringWriter mw = new StringWriter();
		final StringWriter xw = new StringWriter();
		final PrintWriter enumDef = new PrintWriter(ew);
		final PrintWriter mapDef = new PrintWriter(mw);
		final PrintWriter xml = new PrintWriter(xw);
		String header = "";
		boolean first = true;
		public En() {
			enumDef.println("/** Generated by ConstantsTableGenerator */");
			enumDef.println("@XmlType public enum XEnergyConstantType {");
			
			xml.println("<context.energy-constants>");
			
			mapDef.println("/** Generated by ConstantsTableGenerator */");
			mapDef.println("final Map<XEnergyConstantType, Enum> constantTypeMapping = ImmutableMap.<XEnergyConstantType, Enum>builder()");
		}
		
		@Override
		public void printValue(final String string, final String descr, final String val) {
			if (first) first = false;
			else enumDef.println(",");
			enumDef.print(String.format("@Doc(\"%s - default is %s \")\n %s_%s(%d)", descr,val,header, string, val.split(",").length));		
			
			xml.println(String.format("<!-- %s -->", descr));
			xml.println(String.format("<constant name=\"%s_%s\" value=\"%s\" />", header, string, val));
			
			mapDef.println(String.format(".put(XEnergyConstantType.%s_%s, %s.%s)", header, string, header, string));
		}

		@Override
		public void printHeader(final Class<? extends IConstant> clazz, final String string) {
			header = clazz.getSimpleName();
		}
		
		@Override
		public String toString() {
			final StringWriter stringWriter = new StringWriter();
			final PrintWriter pw = new PrintWriter(stringWriter);
			pw.print(ew.toString());
			pw.println(";");
			pw.println();
			
			pw.println("private final int arity;");
			
			pw.println();
			
			pw.println("XEnergyConstantType(final int arity) {");
			pw.println("this.arity = arity;");
			pw.println("}");
			pw.println();
			pw.println("public int getArity() { return this.arity; }");
			pw.println("}");
			pw.println();pw.println();pw.println();
			
			pw.println(xw.toString());
			pw.println("</context.energy-constants>");
			pw.println();pw.println();pw.println();
			
			pw.println(mw.toString());
			
			pw.println(".build();");
			
			return stringWriter.toString();
		}
	}
	
	final IPrinter p;
	public ConstantsTableGenerator(final String mode) {
		switch(mode) {
		case "org":
			p = new Org();
			break;
		case "enum":
			p = new En();
			break;
		case "tab":
			p = new Csv();
			break;
		default:
			throw new IllegalArgumentException("Unknown output mode " + mode);
		}
	}

	/**
	 * @param args
	 */
	public static void main(final String[] args) {
		if (args.length < 2) {
			System.err
					.println("Usage: <java etc> org | enum <package name to scan>, <package name to scan>, ...");
		}
		final String mode = args[0];
		
		if (mode.equals("org")) {
			
		} else if (mode.equals("enum")) {
			
		} else if (mode.equals("tab")) {
			
		} else {
			System.err.println(mode + " is not a known mode");
			return;
		}
		
		final ConstantsTableGenerator self = new ConstantsTableGenerator(mode);
		for (final String pn : args) {
			self.scan(pn);
		}
		System.out.println(self.p.toString());
	}

	private void scan(final String pn) {
		final Reflections reflections = new Reflections(pn);
		final Set<Class<? extends IConstant>> constants = reflections
				.getSubTypesOf(IConstant.class);
		for (final Class<? extends IConstant> clazz : constants) {
			printConstants(clazz);
		}
	}

	private void printConstants(final Class<? extends IConstant> clazz) {
		if (clazz.isEnum()) {
			final IConstant[] values = clazz.getEnumConstants();
			final ConstantDescription classDescription = clazz.getAnnotation(ConstantDescription.class);

			if (values.length > 0) {
				p.printHeader(clazz, classDescription == null ? "" : classDescription.value());
			}

			for (final IConstant c : values) {
				String descr = "no description";
				
				for (final Field f : clazz.getFields()) {
					if (Modifier.isStatic(f.getModifiers())) {
						Object o = null;
						try {
							o = f.get(null);
						} catch (final Throwable th) {
						}
						if (o == c) {
							final ConstantDescription description = f
									.getAnnotation(ConstantDescription.class);
							if (description != null) {
								descr = description.value();
							}
						}
					}

				}
				String val = "???";
				
				try {
					final double[] dvs = c.getValue(double[].class);
					final List<String> parts = new ArrayList<String>();
					for (final double d : dvs) {
						parts.add(String.format("%.3f", d));
					}
					val = Joiner.on(", ").join(parts);
				} catch (final Throwable th) {
					try {
						final double dv = c.getValue(Double.class);
						val = (String.format("%.3f", dv));
					} catch (final Throwable th2) {}
				}
								
				p.printValue(c.toString(), descr, val);
			}
		}
	}
}
